<?xml version="1.0" encoding="UTF-8"?>
<project name="NotationToolkit" default="package" basedir=".">
    <description>Builds, tests, and runs the project NotationToolkit.</description>

    <!-- Initialization target  -->
    <target name="initialization">
        <tstamp/>

        <!--  Give user a chance to override without editing this file  and without using -D arguments each time they build using build.properties files).  -->
        <property file="${basedir}/build.properties" />
        <property name="name" value="HELMNotationToolkit"/>
        <property name="version" value="1.0"/>
        <property name="version.impl" value="${version}"/>
        <property name="version.spec" value="1.0"/>
        <property name="year" value="2012"/>
        <echo message="----------- ${name} ${version} ------------"/>
        <property name="compile.debug"       value="true" />
        <property name="compile.optimize"    value="true" />
        <property name="compile.target"      value="1.6" />
        <property name="compile.source"      value="1.6" />
        <property name="compile.deprecation" value="true" />
        <property name="src.dir" value="${basedir}/source"/>
        <property name="lib.dir" value="${basedir}/lib"/>
        <property name="packages" value="org.helm.notation.*"/>
        <property name="build.dir" value="${basedir}/build"/>
        <property name="build.src" value="${basedir}/build/src"/>
        <property name="build.dest" value="${basedir}/build/classes"/>
        <property name="build.javadoc" value="${basedir}/build/javadoc"/>
        <property name="dist.dir" value="${basedir}/dist"/>
        <property name="publish.dir" value="${basedir}/publish"/>
        <property name="publish.jar.dir" value="${publish.dir}/jar"/>
        <property name="publish.javadoc.dir" value="${publish.dir}/javadoc"/>
        <property name="sample.dir" value="${basedir}/sample"/>
        <property name="sample.dest" value="${basedir}/build/samples"/>
        <filter token="year" value="${year}"/>
        <filter token="version" value="${version}"/>
        <filter token="date" value="${TODAY}"/>
        <filter token="log" value="true"/>
        <filter token="verbose" value="true"/>
    	<property name="marvin.dir" value="${basedir}/lib"/>
    	<property name="marvin.jar.name" value="MarvinBeans-5.0.jar"/>
    	<property name="toolkit.jar.file.name" value="${name}-${version}.jar"/>

        <!-- Compilation class path, include every jar file in lib.dir -->
        <path id="compile.class.path">
            <fileset dir="${lib.dir}">
                <include name="jdom-1.1.jar"/>
                <include name="xerces.jar"/>
                <include name="sdlib.jar"/>
            </fileset>
            <fileset dir="${marvin.dir}">
      		<include name="${marvin.jar.name}"/>
	    </fileset>
        </path>
        
        <!-- Run class path, include everything from compile.class.path and compiled classes -->
        <path id="run.class.path">
            <path refid="compile.class.path"/>
            <pathelement location="${build.dest}"/>
            <pathelement location="${sample.dest}"/>
        </path>
    </target>

    <!-- Help on usage -->
    <target name="usage">
        <echo message=""/>
        <echo message=""/>
        <echo message="NotationToolkit Build file"/>
        <echo message="-------------------------------------------------------------"/>
        <echo message=""/>
        <echo message=" available targets are:"/>
        <echo message=""/>
        <echo message="   publish    --> publish the NotationToolkit jar and javadoc"/>
        <echo message="   package    --> compiles the source code, and generate the NotationToolkit jar"/>
        <echo message="   javadoc    --> generates the API documentation"/>
        <echo message="   cleanall   --> cleans up the build and dist directory"/>
        <echo message=""/>
        <echo message=" See the comments inside the build.xml file for more details."/>
        <echo message="-------------------------------------------------------------"/>
        <echo message=""/>
        <echo message=""/>
    </target>

    <!-- Prepares the build directory -->
    <target name="prepare" depends="initialization">
        <mkdir dir="${build.dir}"/>
    </target>

    <!-- Prepares the source code -->
    <target name="prepare-src" depends="prepare">
        <!-- create directories -->
        <mkdir dir="${build.src}"/>
        <mkdir dir="${build.dest}"/>

        <!-- copy src files -->
        <copy todir="${build.src}"   filtering="yes">
            <fileset dir="${src.dir}"/>
        </copy>
    </target>

    <!-- Compiles the source directory  -->
    <target name="compile-source" depends="prepare-src"  description="Compiles the source code">
        <javac srcdir="${build.src}" 
            destdir="${build.dest}" 
            debug="${compile.debug}" 
            optimize="${compile.optimize}" 
            target="${compile.target}" 
            source="${compile.source}" 
            deprecation="${compile.deprecation}">
            <classpath refid="compile.class.path"/>
        </javac>
    </target>

    <!-- Creates the class package -->
    <target name="package" depends="compile-source" description="Creates the class package, include xml and xsd files">
        <delete dir = "${dist.dir}" />
        <mkdir dir = "${dist.dir}" />
        <copy todir="${build.dest}" filtering="yes">
            <fileset dir="${build.src}">
                <include name="**/*.xml"/>
                <include name="**/*.xsd"/>
                <include name="**/*.properties"/>
            </fileset>
        </copy>
        <jar jarfile="${dist.dir}/${toolkit.jar.file.name}"   basedir="${build.dest}" />
    </target>
    
    <!-- Publish jar and javadoc -->
    <target name="publish" depends="cleanall, package, javadoc" description="Move jar and javadoc into publish folder">
        <copy todir="${publish.jar.dir}" >
            <fileset dir="${dist.dir}" >
                <include name="**/*.jar"/>
            </fileset>
        </copy>

        <jar jarfile="${dist.dir}/${name}-${version}-javadoc.zip"   basedir="${build.javadoc}" />
        
        <copy todir="${publish.javadoc.dir}" >
            <fileset  dir="${dist.dir}">
                <include name="**/*.zip"/>
            </fileset>
        </copy>
    </target>
    
    <!-- Prepares the example code -->
    <target name="prepare-sample" depends="prepare">
        <!-- create directories -->
        <mkdir dir="${sample.dest}"/>
        <!-- copy src files -->
        <copy todir="${sample.dest}" filtering="yes">
            <fileset dir="${sample.dir}"/>
        </copy>
    </target>
    
    <!-- Compiles the samples directory -->
    <target name="compile-sample" depends="prepare-sample,package"   description="Compiles the samples directory">
        <javac srcdir="${sample.dest}"
           destdir="${sample.dest}"
           debug="${compile.debug}"
           optimize="${compile.optimize}"
           target="${compile.target}"
           source="${compile.source}"
           deprecation="${compile.deprecation}">
            <classpath refid="run.class.path"/>
        </javac>
    </target>
    
    <!-- Run sample file ToolkitSample -->
    <target name="run-sample" depends="compile-sample" description="Run ToolkitSample class" >
        <java classname="org.helm.notation.demo.tools.ToolkitSample">
            <classpath refid="run.class.path"/>
        </java>
    </target>

    <!-- Creates the API documentation  -->
    <target name="javadoc" depends="prepare-src"   description="Creates the API documentation">
        <mkdir dir="${build.javadoc}"/>
        <javadoc packagenames="${packages}"
             sourcepath="${build.src}"
             destdir="${build.javadoc}"
             author="true"
             version="true"
             use="true"
             splitindex="true"
             noindex="false"
             windowtitle="${name} v${version}"
             doctitle="${name} v${version}&lt;br&gt;API Specification"
             header="&lt;b&gt;${name}&lt;br&gt;&lt;font size='-1'&gt;${version}&lt;/font&gt;&lt;/b&gt;"
             bottom="Copyright &#169; ${year}, The Pistoia Alliance">
            <classpath refid="run.class.path"/>
        </javadoc>
    </target>
   
    <!-- Clean build and dist folder -->
    <target name="cleanall" depends="initialization"  description="Removes all build and dist files">
        <delete dir="${dist.dir}"/>
        <delete dir="${build.dir}"/>
    </target>
</project>
